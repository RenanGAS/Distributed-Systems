// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: src/main/java/project/Movie.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package output;

@kotlin.jvm.JvmName("-initializeactor")
public inline fun actor(block: output.ActorKt.Dsl.() -> kotlin.Unit): output.Actor =
  output.ActorKt.Dsl._create(output.Actor.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `Movie.Actor`
 */
public object ActorKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: output.Actor.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: output.Actor.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): output.Actor = _builder.build()

    /**
     * `optional string name = 1;`
     */
    public var name: kotlin.String
      @JvmName("getName")
      get() = _builder.getName()
      @JvmName("setName")
      set(value) {
        _builder.setName(value)
      }
    /**
     * `optional string name = 1;`
     */
    public fun clearName() {
      _builder.clearName()
    }
    /**
     * `optional string name = 1;`
     * @return Whether the name field is set.
     */
    public fun hasName(): kotlin.Boolean {
      return _builder.hasName()
    }

    /**
     * `optional int32 age = 2;`
     */
    public var age: kotlin.Int
      @JvmName("getAge")
      get() = _builder.getAge()
      @JvmName("setAge")
      set(value) {
        _builder.setAge(value)
      }
    /**
     * `optional int32 age = 2;`
     */
    public fun clearAge() {
      _builder.clearAge()
    }
    /**
     * `optional int32 age = 2;`
     * @return Whether the age field is set.
     */
    public fun hasAge(): kotlin.Boolean {
      return _builder.hasAge()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun output.Actor.copy(block: output.ActorKt.Dsl.() -> kotlin.Unit): output.Actor =
  output.ActorKt.Dsl._create(this.toBuilder()).apply { block() }._build()

